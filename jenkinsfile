pipeline {
    agent any

    environment {
        TF_VERSION = "1.5.6" 
        TF_WORKING_DIR = '' 
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Pranayteja15/tf-infra.git'
            }
        }

        stage('Set Terraform Directory') {
            steps {
                script {
                    if (fileExists("${WORKSPACE}/terraform-infra")) {
                        env.TF_WORKING_DIR = "${WORKSPACE}/terraform-infra"
                    } else {
                        env.TF_WORKING_DIR = "${WORKSPACE}"
                    }
                    echo "Terraform will run in: ${env.TF_WORKING_DIR}"
                }
            }
        }

        stage('Validate Terraform Files') {
            steps {
                script {
                    def tfFiles = sh(script: "ls ${env.TF_WORKING_DIR}/*.tf 2>/dev/null | wc -l", returnStdout: true).trim()
                    if (tfFiles == "0") {
                        error "No Terraform files found in ${env.TF_WORKING_DIR}. Check your repository!"
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir(env.TF_WORKING_DIR) {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir(env.TF_WORKING_DIR) {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Approval') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Proceed with Terraform Apply?', parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Approve to Apply', name: 'Approve']
                        ]
                    )
                    if (!userInput) {
                        error("Deployment aborted!")
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                branch 'main'
            }
            steps {
                dir(env.TF_WORKING_DIR) {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
