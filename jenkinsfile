pipeline {
    agent any

    environment {
        TF_VERSION = "1.5.6" // Update as per latest Terraform version
        TF_WORKING_DIR = "${WORKSPACE}/terraform-infra"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Pranayteja15/tf-infra.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir(TF_WORKING_DIR) {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir(TF_WORKING_DIR) {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Approval') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Proceed with Terraform Apply?', parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Approve to Apply', name: 'Approve']
                        ]
                    )
                    if (!userInput) {
                        error("Deployment aborted!")
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                branch 'main'
            }
            steps {
                dir(TF_WORKING_DIR) {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
